<application>
  <component name="AppStorage">
    <histories>
      <item value="常量" />
      <item value="expire" />
      <item value="lease Time" />
      <item value="millis" />
      <item value="SECONDS" />
      <item value="model 3B may return &quot;/dev/ttyS0&quot; or &quot;/dev/ttyAMA0&quot; depending on // environment configuration." />
      <item value="* This example program supports the following optional command arguments/options: * &quot;--device (device-path)&quot; [DEFAULT: /dev/ttyAMA0] * &quot;--baud (baud-rate)&quot; [DEFAULT: 38400] * &quot;--data-bits (5|6|7|8)&quot; [DEFAULT: 8] * &quot;--parity (none|odd|even)&quot; [DEFAULT: none] * &quot;--stop-bits (1|2)&quot; [DEFAULT: 1] * &quot;--flow-control (none|hardware|software)&quot; [DEFAULT: none]" />
      <item value="nano Time" />
      <item value="nanoseconds" />
      <item value="milliseconds" />
      <item value="height" />
      <item value="MINUTES" />
      <item value="available: more than one 'primary' bean found among candidates:" />
      <item value="produced signal would looks like, _|-----|" />
      <item value="his will generate 8 cycle sonic burst." />
      <item value="tart ranging- trig should be in high state for 10us to generate ultrasonic signal" />
      <item value="REJECTION TIME" />
      <item value="rejection start" />
      <item value="TRIGGER CALLBACK RECEIVED" />
      <item value="display pin state on console" />
      <item value="create and register gpio pin listener" />
      <item value="// create a gpio callback trigger on gpio pin#4; when #4 changes state, perform a callback // invocation on the user defined 'Callable' class instance" />
      <item value="create a gpio synchronization trigger on the input pin; when the input changes, also set gpio pin #05 to same state" />
      <item value="create a gpio pulse trigger on the input pin; when the input goes HIGH, also pulse gpio pin #06 to the HIGH state for 1 second" />
      <item value="reate a gpio control trigger on the input pin ; when the input goes HIGH, also set gpio pin #04 to HIGH" />
      <item value="create a gpio control trigger on the input pin ; when the input goes HIGH, also set gpio pin #04 to HIGH" />
      <item value="set shutdown state for this input pin" />
      <item value="provision gpio pin #02 as an input pin with its internal pull down resistor enabled" />
      <item value="MILLISECONDS" />
      <item value="auto Delete" />
      <item value="exclusive" />
      <item value="durable" />
      <item value="low" />
      <item value="toggle" />
      <item value="get Encoder" />
      <item value="compression" />
      <item value="压缩" />
      <item value="modify" />
      <item value="file offset" />
      <item value="dept Name" />
      <item value="ReasonPhrase: Unauthorized." />
      <item value="Unsatisfied dependency expressed through field 'jdbcTemplate'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.jdbc.core.JdbcTemplate' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}" />
      <item value="Decoder" />
      <item value="poll" />
      <item value="间隔" />
      <item value="offer" />
      <item value="环境" />
      <item value="A String containing the resulting Base64 encoded characters" />
      <item value="encode" />
      <item value="Encoder" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="163" />
        <entry key="ENGLISH" value="163" />
        <entry key="FILIPINO" value="2" />
        <entry key="GREEK" value="1" />
        <entry key="INDONESIAN" value="1" />
      </map>
    </option>
  </component>
</application>