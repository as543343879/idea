<application>
  <component name="AppStorage">
    <histories>
      <item value="Method [download] was discovered in the .class file but cannot be resolved in the class object" />
      <item value="永久" />
      <item value="different" />
      <item value="Ignoring onDemand update due to rate limiter" />
      <item value="Saw local status change event StatusChangeEvent" />
      <item value="Seconds" />
      <item value="Cannot determine embedded database driver class for database type NONE" />
      <item value="permit All" />
      <item value="Renew" />
      <item value="authenticated" />
      <item value="excludes" />
      <item value="ndicates whether the user is enabled or disabled. A disabled user cannot be" />
      <item value="Invoked by a BeanFactory after it has set all bean properties supplied * (and satisfied BeanFactoryAware and ApplicationContextAware). * &lt;p&gt;This method allows the bean instance to perform initialization only * possible when all bean properties have been set and to throw an * exception in the event of misconfiguration. * @throws Exception in the event of misconfiguration (such * as failure to set an essential property) or if initialization fails." />
      <item value="Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be difficult to maintain." />
      <item value="Cognitive Complexity of methods should not be too high" />
      <item value="Utility classes, which are collections of static members, are not meant to be instantiated. Even abstract utility classes, which can be extended, should not have public constructors. Java adds an implicit public constructor to every class which does not define at" />
      <item value="Utility classes, which are collections of static members, are not meant to be instantiated. Even abstract utility classes, which can be extended, should not have public constructors.&#10;Java adds an implicit public constructor to every class which does not define at" />
      <item value="Modifiers should be declared in the correct order" />
      <item value="fields should not be publicly mutable" />
      <item value="性别" />
      <item value="出生" />
      <item value="公民身份号码" />
      <item value="住址" />
      <item value="民族" />
      <item value="姓名" />
      <item value="签发日期" />
      <item value="签发机关" />
      <item value="expiration date" />
      <item value="失效日期" />
      <item value="Certification" />
      <item value="concurrent" />
      <item value="Slot" />
      <item value="Assignee" />
      <item value="task Assignee" />
      <item value="decode" />
      <item value="月" />
      <item value="decrypted failed" />
      <item value="在线" />
      <item value="离线" />
      <item value="Resolution" />
      <item value="verbose" />
      <item value="Initializes a newly created {@code String} object so that it represents * the same sequence of characters as the argument; in other words, the * newly created string is a copy of the argument string. Unless an * explicit copy of {@code original} is needed, use of this constructor is * unnecessary since Strings are immutable." />
      <item value="Time unit representing one thousandth of a second" />
      <item value="The table, initialized on first use, and resized as * necessary. When allocated, length is always a power of two. * (We also tolerate length zero in some operations to allow * bootstrapping mechanics that are currently not needed.)" />
      <item value="Returns a power of two size for the given target capacity." />
      <item value="evict if false, the table is in creation mode." />
      <item value="onlyIfAbsent if true, don't change existing value" />
      <item value="* @param hash hash for key * @param key the key * @param value the value to put * @param onlyIfAbsent if true, don't change existing value * @param evict if false, the table is in creation mode. * @return previous value, or null if none" />
      <item value="* Returns a hash code value for the object. This method is * supported for the benefit of hash tables such as those provided by * {@link java.util.HashMap}. * &lt;p&gt; * The general contract of {@code hashCode} is: * &lt;ul&gt; * &lt;li&gt;Whenever it is invoked on the same object more than once during * an execution of a Java application, the {@code hashCode} method * must consistently return the same integer, provided no information * used in {@code equals} comparisons on the object is modified. * This integer need not remain consistent from one execution of an * application to another execution of the same application. * &lt;li&gt;If two objects are equal according to the {@code equals(Object)} * method, then calling the {@code hashCode} method on each of * the two objects must produce the same integer result. * &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal * according to the {@link java.lang.Object#equals(java.lang.Object)} * method, then calling the {@code hashCode} method on each of the * two objects must produce distinct integer results. However, the * programmer should be aware that producing distinct integer results * for unequal objects may improve the performance of hash tables. * &lt;/ul&gt; * &lt;p&gt; * As much as is reasonably practical, the hashCode method defined by * class {@code Object} does return distinct integers for distinct * objects. (This is typically implemented by converting the internal * address of the object into an integer, but this implementation * technique is not required by the * Java&amp;trade; programming language.)" />
      <item value="* As much as is reasonably practical, the hashCode method defined by * class {@code Object} does return distinct integers for distinct * objects. (This is typically implemented by converting the internal * address of the object into an integer, but this implementation * technique is not required by the * Java&amp;trade; programming language.)" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="78" />
        <entry key="ENGLISH" value="79" />
      </map>
    </option>
  </component>
</application>